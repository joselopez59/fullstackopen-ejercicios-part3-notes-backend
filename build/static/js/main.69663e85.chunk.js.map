{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","notesToShow","filter","map","i","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"oLAaeA,EAbF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBAEdC,EAAQF,EAAKG,UACf,qBACA,iBAEJ,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCG3BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,qBAAKJ,UAAU,QAAf,SACGI,K,gBCFDC,EAAU,aAyBD,EAvBA,WACb,IAAMC,EAAUC,IAAMC,IAAIH,GAEpBI,EAAc,CAClBC,GAAI,IACJT,QAAS,mCACTU,KAAM,2BACNZ,WAAW,GAEb,OAAOO,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAcxC,EAXA,SAAAO,GAEb,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAS5B,EANA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCnBrCK,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GAwGSC,EAnGH,WAAO,IAAD,EAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGcF,mBAAS,IAHvB,mBAGTG,EAHS,KAGAC,EAHA,OAIcJ,oBAAS,GAJvB,mBAITK,EAJS,KAIAC,EAJA,OAKwBN,mBAAS,MALjC,mBAKTO,EALS,KAKKC,EALL,KAOhBC,qBAAU,WAERC,IAKGvB,MAAK,SAAAC,GACJc,EAASd,QAEZ,IAEH,IA2CMuB,EAAcN,EAChBJ,EACAA,EAAMW,QAAO,SAAAzC,GAAI,OAAIA,EAAKG,aAE9B,OACE,gCACE,uCACA,cAAC,EAAD,CAAcK,QAAS4B,IACvB,8BACE,yBAAQ9B,QAAS,kBAAM6B,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAIlC,6BACGM,EAAYE,KAAI,SAAC1C,EAAM2C,GAAP,OACf,cAAC,EAAD,CACE3C,KAAMA,EAENC,iBAAkB,kBA9DD,SAAAa,GACzB,IAAMd,EAAO8B,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE/B,KAAOA,KAChCgC,EAAW,2BAAQ9C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDoC,EACUzB,EAAIgC,GACX9B,MAAK,SAAA+B,GACJhB,EAASD,EAAMY,KAAI,SAAA1C,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAO+C,SAEpDC,OAAM,SAAAC,GACLZ,EAAgB,aAAD,OACArC,EAAKK,QADL,sCAGf6C,YAAW,WACTb,EAAgB,QACf,KAEHN,EAASD,EAAMW,QAAO,SAAAI,GAAC,OAAIA,EAAE/B,KAAOA,SA6CRqC,CAAmBnD,EAAKc,MAD3C6B,QAMX,uBAAMS,SA9CM,SAACC,GACfA,EAAMC,iBAEN,IAAMC,EAAa,CACjBlD,QAAS2B,EACTjB,MAAM,IAAIyC,MAAOC,cACjBtD,UAAWuD,KAAKC,SAAW,GAC3B7C,GAAIgB,EAAM8B,OAAS,GAGrBrB,EACUgB,GACPvC,MAAK,SAAA+B,GACJhB,EAASD,EAAMX,OAAO4B,IACtBd,EAAW,QAgCb,UACE,uBACE4B,MAAO7B,EACP8B,SA/BiB,SAACT,GACxBpB,EAAWoB,EAAMU,OAAOF,UAgCpB,wBAAQG,KAAK,SAAb,qBAGF,cAAC,EAAD,QC7GNC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.69663e85.chunk.js","sourcesContent":["const Note = ({ note, toggleImportance }) => {\n\n  const label = note.important\n    ? 'make not important' \n    : 'make important'\n\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\nexport default Note;","const Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification;","import axios from 'axios';\n\n// const baseUrl = 'http://localhost:3001/notes';\n// const baseUrl = 'http://localhost:3001/api/notes';\n// const baseUrl = 'https://secret-headland-74777.herokuapp.com/api/notes';\nconst baseUrl = '/api/notes';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  // return request.then(response => response.data);\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { getAll, create, update }","import React, { useEffect, useState } from 'react';\n\nimport Note from './components/Note';\nimport Notification from './components/Notification';\nimport noteService from './services/notes'\n\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nconst App = () => {\n\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    // console.log('effect');\n    noteService\n      .getAll()\n      // .then(initialNotes  => {\n      //   setNotes(initialNotes);\n      // })\n      .then(response => {\n        setNotes(response)\n      })\n  }, []);\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote  => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote ));\n      })\n      .catch(error => {\n        setErrorMessage(\n          `The note '${note.content}' was already deleted from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000);\n\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const addNote = (event) => {\n    event.preventDefault();\n\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote  => {\n        setNotes(notes.concat(returnedNote ));\n        setNewNote('');\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n\n      <ul>\n        {notesToShow.map((note, i) =>\n          <Note\n            note={note}\n            key={i}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n\n      <Footer />\n    </div>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render( \n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}